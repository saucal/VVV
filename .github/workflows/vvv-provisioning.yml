# This is a basic workflow to help you get started with Actions

name: VVV Provisioning

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the develop branch
on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop, stable ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Run Provisioner
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Make Symlinks
      - name: Create Vagrant Like Environment
        run: |
          # uninstall pre installed packages (to test if utilities work)
          sudo apt-get -q --autoremove --purge remove php*
          sudo apt-get -q autoclean

          # create vagrant user
          sudo groupadd -g 2000 vagrant
          sudo useradd -u 2000 -g vagrant -m vagrant

          # Install bindfs, which would allow us to "mount" folders with specific permissions
          # similar to vagrant shares
          sudo apt-get update
          sudo apt-get install bindfs -y

          # vbox_mount function to sumulate synced folders
          function vbox_mount() {
            local perms="-p ug=rwx,o=r";
            if [ ! -z "${5}" ]; then 
              perms="-p ${5}"
            fi
            sudo mkdir -p "$2"
            sudo bindfs --chown-ignore --chgrp-ignore --chmod-ignore -u "$3" -g "$4" "$1" "$2" $perms
          }

          # create srv folder
          sudo -u "vagrant" mkdir -p "/srv"

          # copy files provided by vagrant
          sudo cp -f "$GITHUB_WORKSPACE/config/default-config.yml" "$GITHUB_WORKSPACE/config/config.yml"
          sudo cp -f "$GITHUB_WORKSPACE/version" "/home/vagrant/version"

          # simulate vagrant synced folders
          sudo mkdir -p "$GITHUB_WORKSPACE/certificates"
          sudo mkdir -p "$GITHUB_WORKSPACE/log/memcached"
          sudo mkdir -p "$GITHUB_WORKSPACE/log/nginx"
          sudo mkdir -p "$GITHUB_WORKSPACE/log/php"
          sudo mkdir -p "$GITHUB_WORKSPACE/log/provisioners"
          vbox_mount "$GITHUB_WORKSPACE/database/sql" "/srv/database" "vagrant" "vagrant"
          vbox_mount "$GITHUB_WORKSPACE/config" "/srv/config" "vagrant" "vagrant"
          vbox_mount "$GITHUB_WORKSPACE/provision" "/srv/provision" "vagrant" "vagrant"
          vbox_mount "$GITHUB_WORKSPACE/certificates" "/srv/certificates" "vagrant" "vagrant"
          vbox_mount "$GITHUB_WORKSPACE/www" "/srv/www" "vagrant" "www-data" "ug=rwx,o=r,o+D"
          vbox_mount "$GITHUB_WORKSPACE/log/memcached" "/var/log/memcached" "root" "syslog" "666"
          vbox_mount "$GITHUB_WORKSPACE/log/nginx" "/var/log/nginx" "root" "syslog" "666"
          vbox_mount "$GITHUB_WORKSPACE/log/php" "/var/log/php" "root" "syslog" "666"
          vbox_mount "$GITHUB_WORKSPACE/log/provisioners" "/var/log/provisioners" "root" "syslog" "666"

      # Runs the provisioners in the expected order
      - name: Run provison-pre.sh
        run: sudo bash -c '. "/srv/provision/tests/provisioners.sh" && pre_hook'

      - name: Run provison.sh
        run: sudo bash -c '. "/srv/provision/tests/provisioners.sh" && provision_main'

      - name: Run provison-dashboard.sh
        run: sudo bash -c '. "/srv/provision/tests/provisioners.sh" && provision_dashboard'

      - name: Run provison-utility-source.sh
        run: sudo bash -c '. "/srv/provision/tests/provisioners.sh" && provision_utility_sources'

      - name: Run provison-utility.sh
        run: sudo bash -c '. "/srv/provision/tests/provisioners.sh" && provision_utilities'

      - name: Run provison-site.sh
        run: sudo bash -c '. "/srv/provision/tests/provisioners.sh" && provision_sites'

      - name: Run provison-post.sh
        run: sudo bash -c '. "/srv/provision/tests/provisioners.sh" && post_hook'

      # At this point, we would run some extra tests
      # TODO: Ideas
      # - Add screenshots of provisioned sites
      # - CURL mailhog API to see if it's working or not
      #Â - Check VM hostfile

      - name: Prepare Output
        run: |
          sudo cp -rf "$GITHUB_WORKSPACE/log" "/vvv-logs"
          MYUID=$(id -u -n)
          MYGID=$(id -g -n)
          sudo chown -R $MYUID:$MYGID "/vvv-logs"

      - uses: actions/upload-artifact@v2
        with:
          name: logs
          path: "/vvv-logs"
